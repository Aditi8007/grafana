{
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "schemes": ["http", "https"],
  "swagger": "2.0",
  "info": {
    "description": "API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)\nSchemes:\nhttp",
    "title": "Alertmanager API",
    "contact": {
      "name": "Grafana Labs",
      "url": "https://grafana.com",
      "email": "hello@grafana.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/alerts": {
      "get": {
        "description": "Get a list of alerts",
        "tags": ["alert"],
        "operationId": "getAlerts",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "Active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter alerts by",
            "name": "Filter",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "Inhibited",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "Receiver",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "Silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show unprocessed alerts",
            "name": "Unprocessed",
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Create new Alerts",
        "tags": ["alert"],
        "operationId": "postAlerts",
        "parameters": [
          {
            "description": "The alerts to create",
            "name": "Alerts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postableAlerts"
            }
          }
        ]
      }
    },
    "/alerts/groups": {
      "get": {
        "description": "Get a list of alert groups",
        "tags": ["alertgroup"],
        "operationId": "getAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "Active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter alerts by",
            "name": "Filter",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "Inhibited",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "Receiver",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "Silenced",
            "in": "query"
          }
        ]
      }
    },
    "/dashboards/db": {
      "post": {
        "description": "Creates a new dashboard or updates an existing dashboard.",
        "tags": ["dashboards"],
        "summary": "Create / Update dashboard",
        "operationId": "postDashboard",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SaveDashboardCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PostDashboardResponse",
            "schema": {
              "$ref": "#/definitions/PostDashboardResponse"
            }
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "412": {
            "$ref": "#/responses/preconditionFailedError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/home": {
      "get": {
        "description": "Get home dashboard",
        "tags": ["dashboards"],
        "operationId": "getHomeDashboard",
        "responses": {
          "200": {
            "description": "GetHomeDashboardResponse",
            "schema": {
              "$ref": "#/definitions/GetHomeDashboardResponse"
            }
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/uid/{uid}": {
      "get": {
        "description": "Will return the dashboard given the dashboard unique identifier (uid).",
        "tags": ["dashboards"],
        "summary": "Get dashboard by uid",
        "operationId": "getDashboardByUID",
        "parameters": [
          {
            "maxLength": 40,
            "type": "string",
            "description": "The unique identifier (uid) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\nIt’s automatically generated if not provided when creating a dashboard. The uid allows having consistent URL’s for accessing\ndashboards and when syncing dashboards between multiple Grafana installs. This means that changing the title of a dashboard\nwill not break any bookmarked links to that dashboard.",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardResponse",
            "schema": {
              "$ref": "#/definitions/DashboardResponse"
            }
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "Will delete the dashboard given the specified unique identifier (uid).",
        "tags": ["dashboards"],
        "summary": "Delete dashboard by uid",
        "operationId": "deleteDashboardByUID",
        "parameters": [
          {
            "maxLength": 40,
            "type": "string",
            "description": "The unique identifier (uid) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\nIt’s automatically generated if not provided when creating a dashboard. The uid allows having consistent URL’s for accessing\ndashboards and when syncing dashboards between multiple Grafana installs. This means that changing the title of a dashboard\nwill not break any bookmarked links to that dashboard.",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteDashboardResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/receivers": {
      "get": {
        "description": "Get list of all receivers (name of notification integrations)",
        "tags": ["receiver"],
        "operationId": "getReceivers"
      }
    },
    "/silence/{silenceID}": {
      "get": {
        "description": "Get a silence by its ID",
        "tags": ["silence"],
        "operationId": "getSilence",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the silence to get",
            "name": "SilenceID",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "Delete a silence by its ID",
        "tags": ["silence"],
        "operationId": "deleteSilence",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the silence to get",
            "name": "SilenceID",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/silences": {
      "get": {
        "description": "Get a list of silences",
        "tags": ["silence"],
        "operationId": "getSilences",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter silences by",
            "name": "Filter",
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Post a new silence or update an existing one",
        "tags": ["silence"],
        "operationId": "postSilences",
        "parameters": [
          {
            "description": "The silence to create",
            "name": "Silence",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postableSilence"
            }
          }
        ]
      }
    },
    "/status": {
      "get": {
        "description": "Get current status of an Alertmanager instance and its cluster",
        "tags": ["general"],
        "operationId": "getStatus"
      }
    }
  },
  "definitions": {
    "DashboardMeta": {
      "type": "object",
      "properties": {
        "canAdmin": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canSave": {
          "type": "boolean"
        },
        "canStar": {
          "type": "boolean"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        },
        "folderId": {
          "type": "integer",
          "format": "int64"
        },
        "folderTitle": {
          "type": "string"
        },
        "folderUid": {
          "type": "string"
        },
        "folderUrl": {
          "type": "string"
        },
        "hasAcl": {
          "type": "boolean"
        },
        "isFolder": {
          "type": "boolean"
        },
        "isHome": {
          "type": "boolean"
        },
        "isSnapshot": {
          "type": "boolean"
        },
        "isStarred": {
          "type": "boolean"
        },
        "provisioned": {
          "type": "boolean"
        },
        "provisionedExternalId": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DashboardRedirect": {
      "type": "object",
      "required": ["redirectUri"],
      "properties": {
        "redirectUri": {
          "description": "RedirectUri The redirect URI",
          "type": "string"
        }
      }
    },
    "DashboardResponse": {
      "type": "object",
      "title": "It is the full dashboard response with metadata.",
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "meta": {
          "$ref": "#/definitions/DashboardMeta"
        }
      }
    },
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time"
    },
    "GetHomeDashboardResponse": {
      "title": "Get home dashboard response.",
      "allOf": [
        {
          "$ref": "#/definitions/DashboardResponse"
        },
        {
          "$ref": "#/definitions/DashboardRedirect"
        }
      ]
    },
    "Json": {
      "description": "Json",
      "type": "object"
    },
    "PostDashboardResponse": {
      "type": "object",
      "title": "Create/update dashboard response.",
      "required": ["status", "title", "version", "uid", "url"],
      "properties": {
        "status": {
          "description": "Status status of the response.",
          "type": "string",
          "example": "success"
        },
        "title": {
          "description": "Slug The slug of the dashboard.",
          "type": "string",
          "example": "my-dashboard"
        },
        "uid": {
          "description": "UID The unique identifier (uid) of the created/updated dashboard.",
          "type": "string",
          "example": "nHz3SXiiz"
        },
        "url": {
          "description": "URL The relative URL for accessing the created/updated dashboard.",
          "type": "string",
          "example": "/d/nHz3SXiiz/my-dashboard"
        },
        "version": {
          "description": "Version The version of the dashboard.",
          "type": "integer",
          "format": "int64",
          "example": 2
        }
      }
    },
    "PostSilencesOKBody": {
      "description": "PostSilencesOKBody post silences o k body",
      "type": "object",
      "properties": {
        "silenceID": {
          "description": "silence ID",
          "type": "string"
        }
      }
    },
    "SaveDashboardCommand": {
      "type": "object",
      "required": ["dashboard"],
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "folderId": {
          "type": "integer",
          "format": "int64"
        },
        "folderUid": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "overwrite": {
          "type": "boolean"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "alert": {
      "description": "Alert alert",
      "type": "object",
      "required": ["labels"],
      "properties": {
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        }
      }
    },
    "alertGroup": {
      "description": "AlertGroup alert group",
      "type": "object",
      "required": ["alerts", "labels", "receiver"],
      "properties": {
        "alerts": {
          "description": "alerts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/gettableAlert"
          }
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receiver": {
          "$ref": "#/definitions/receiver"
        }
      }
    },
    "alertGroups": {
      "description": "AlertGroups alert groups",
      "type": "array",
      "items": {
        "$ref": "#/definitions/alertGroup"
      }
    },
    "alertStatus": {
      "description": "AlertStatus alert status",
      "type": "object",
      "required": ["inhibitedBy", "silencedBy", "state"],
      "properties": {
        "inhibitedBy": {
          "description": "inhibited by",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "silencedBy": {
          "description": "silenced by",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "description": "state",
          "type": "string",
          "enum": ["[unprocessed active suppressed]"]
        }
      }
    },
    "alertmanagerConfig": {
      "description": "AlertmanagerConfig alertmanager config",
      "type": "object",
      "required": ["original"],
      "properties": {
        "original": {
          "description": "original",
          "type": "string"
        }
      }
    },
    "alertmanagerStatus": {
      "description": "AlertmanagerStatus alertmanager status",
      "type": "object",
      "required": ["cluster", "config", "uptime", "versionInfo"],
      "properties": {
        "cluster": {
          "$ref": "#/definitions/clusterStatus"
        },
        "config": {
          "$ref": "#/definitions/alertmanagerConfig"
        },
        "uptime": {
          "description": "uptime",
          "type": "string",
          "format": "date-time"
        },
        "versionInfo": {
          "$ref": "#/definitions/versionInfo"
        }
      }
    },
    "clusterStatus": {
      "description": "ClusterStatus cluster status",
      "type": "object",
      "required": ["status"],
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        },
        "peers": {
          "description": "peers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/peerStatus"
          }
        },
        "status": {
          "description": "status",
          "type": "string",
          "enum": ["[ready settling disabled]"]
        }
      }
    },
    "gettableAlert": {
      "description": "GettableAlert gettable alert",
      "type": "object",
      "required": ["labels", "annotations", "endsAt", "fingerprint", "receivers", "startsAt", "status", "updatedAt"],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "fingerprint": {
          "description": "fingerprint",
          "type": "string"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receivers": {
          "description": "receivers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/receiver"
          }
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/alertStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gettableAlerts": {
      "description": "GettableAlerts gettable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/gettableAlert"
      }
    },
    "gettableSilence": {
      "description": "GettableSilence gettable silence",
      "type": "object",
      "required": ["comment", "createdBy", "endsAt", "matchers", "startsAt", "id", "status", "updatedAt"],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string"
        },
        "createdBy": {
          "description": "created by",
          "type": "string"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/silenceStatus"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gettableSilences": {
      "description": "GettableSilences gettable silences",
      "type": "array",
      "items": {
        "$ref": "#/definitions/gettableSilence"
      }
    },
    "labelSet": {
      "description": "LabelSet label set",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "matcher": {
      "description": "Matcher matcher",
      "type": "object",
      "required": ["isRegex", "name", "value"],
      "properties": {
        "isEqual": {
          "description": "is equal",
          "type": "boolean"
        },
        "isRegex": {
          "description": "is regex",
          "type": "boolean"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "value": {
          "description": "value",
          "type": "string"
        }
      }
    },
    "matchers": {
      "description": "Matchers matchers",
      "type": "array",
      "items": {
        "$ref": "#/definitions/matcher"
      }
    },
    "peerStatus": {
      "description": "PeerStatus peer status",
      "type": "object",
      "required": ["address", "name"],
      "properties": {
        "address": {
          "description": "address",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        }
      }
    },
    "postableAlert": {
      "description": "PostableAlert postable alert",
      "type": "object",
      "required": ["labels"],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at\nFormat: date-time",
          "type": "string",
          "format": "date-time"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "startsAt": {
          "description": "starts at\nFormat: date-time",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "postableAlerts": {
      "description": "PostableAlerts postable alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/postableAlert"
      }
    },
    "postableSilence": {
      "description": "PostableSilence postable silence",
      "type": "object",
      "required": ["comment", "createdBy", "endsAt", "matchers", "startsAt"],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string"
        },
        "createdBy": {
          "description": "created by",
          "type": "string"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "receiver": {
      "description": "Receiver receiver",
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        }
      }
    },
    "silence": {
      "description": "Silence silence",
      "type": "object",
      "required": ["comment", "createdBy", "endsAt", "matchers", "startsAt"],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string"
        },
        "createdBy": {
          "description": "created by",
          "type": "string"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "silenceStatus": {
      "description": "SilenceStatus silence status",
      "type": "object",
      "required": ["state"],
      "properties": {
        "state": {
          "description": "state",
          "type": "string",
          "enum": ["[expired active pending]"]
        }
      }
    },
    "versionInfo": {
      "description": "VersionInfo version info",
      "type": "object",
      "required": ["branch", "buildDate", "buildUser", "goVersion", "revision", "version"],
      "properties": {
        "branch": {
          "description": "branch",
          "type": "string"
        },
        "buildDate": {
          "description": "build date",
          "type": "string"
        },
        "buildUser": {
          "description": "build user",
          "type": "string"
        },
        "goVersion": {
          "description": "go version",
          "type": "string"
        },
        "revision": {
          "description": "revision",
          "type": "string"
        },
        "version": {
          "description": "version",
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "DeleteDashboardResponse": {
      "description": "The response when successfully deleting a dashboard.",
      "schema": {
        "type": "object",
        "required": ["id", "title", "message"],
        "properties": {
          "id": {
            "description": "ID Identifier of the deleted dashboard.",
            "type": "integer",
            "format": "int64",
            "example": 65
          },
          "message": {
            "description": "Message Message of the deleted dashboard.",
            "type": "string",
            "example": "Dashboard My Dashboard deleted"
          },
          "title": {
            "description": "Title Title of the deleted dashboard.",
            "type": "string",
            "example": "My Dashboard"
          }
        }
      }
    },
    "badRequestError": {
      "description": "BadRequestError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    },
    "deleteSilenceInternalServerError": {
      "description": "DeleteSilenceInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "deleteSilenceOK": {
      "description": "DeleteSilenceOK Delete silence response"
    },
    "forbiddenError": {
      "description": "ForbiddenError Insufficient permission to access the requested resource.",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    },
    "genericError": {
      "description": "A GenericError is the default error message that is generated.\nFor certain status codes there are more appropriate error structures.",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    },
    "getAlertGroupsBadRequest": {
      "description": "GetAlertGroupsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertGroupsInternalServerError": {
      "description": "GetAlertGroupsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertGroupsOK": {
      "description": "GetAlertGroupsOK Get alert groups response",
      "schema": {
        "$ref": "#/definitions/alertGroups"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getAlertsBadRequest": {
      "description": "GetAlertsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertsInternalServerError": {
      "description": "GetAlertsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertsOK": {
      "description": "GetAlertsOK Get alerts response",
      "schema": {
        "$ref": "#/definitions/gettableAlerts"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getReceiversOK": {
      "description": "GetReceiversOK Get receivers response",
      "headers": {
        "body": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/receiver"
          },
          "description": "In: Body"
        }
      }
    },
    "getSilenceInternalServerError": {
      "description": "GetSilenceInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getSilenceNotFound": {
      "description": "GetSilenceNotFound A silence with the specified ID was not found"
    },
    "getSilenceOK": {
      "description": "GetSilenceOK Get silence response",
      "schema": {
        "$ref": "#/definitions/gettableSilence"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getSilencesInternalServerError": {
      "description": "GetSilencesInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getSilencesOK": {
      "description": "GetSilencesOK Get silences response",
      "schema": {
        "$ref": "#/definitions/gettableSilences"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getStatusOK": {
      "description": "GetStatusOK Get status response",
      "schema": {
        "$ref": "#/definitions/alertmanagerStatus"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "internalServerError": {
      "description": "InternalServerError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    },
    "notFoundError": {
      "description": "NotFoundError Requested resource was not found",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    },
    "okResponse": {
      "description": "OKResponse",
      "schema": {
        "type": "object"
      }
    },
    "postAlertsBadRequest": {
      "description": "PostAlertsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postAlertsInternalServerError": {
      "description": "PostAlertsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postAlertsOK": {
      "description": "PostAlertsOK Create alerts response"
    },
    "postSilencesBadRequest": {
      "description": "PostSilencesBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postSilencesNotFound": {
      "description": "PostSilencesNotFound A silence with the specified ID was not found",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postSilencesOK": {
      "description": "PostSilencesOK Create / update silence response",
      "schema": {
        "$ref": "#/definitions/PostSilencesOKBody"
      },
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "preconditionFailedError": {
      "description": "PreconditionFailedError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    },
    "unauthorisedError": {
      "description": "UnauthorizedError Unauthorized to access the requested resource",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    },
    "unprocessableEntityError": {
      "description": "UnprocessableEntityError",
      "schema": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "error": {
            "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
            "type": "string"
          },
          "message": {
            "description": "a human readable version of the error",
            "type": "string"
          },
          "status": {
            "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "KEY",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "x-tagGroups": [
    {
      "name": "General",
      "tags": ["dashboards"]
    },
    {
      "name": "Server Administration",
      "tags": ["adminSettings", "global_users"]
    }
  ]
}
